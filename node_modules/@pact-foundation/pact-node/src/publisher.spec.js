"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var chai = require("chai");
var chaiAsPromised = require("chai-as-promised");
var publisher_1 = require("./publisher");
var logger_1 = require("./logger");
var broker_mock_1 = require("../test/integration/broker-mock");
var expect = chai.expect;
chai.use(chaiAsPromised);
var currentDir = (process && process.mainModule) ? process.mainModule.filename : "";
describe("Publish Spec", function () {
    var PORT = Math.floor(Math.random() * 999) + 9000;
    var server;
    before(function () { return broker_mock_1.default(PORT).then(function (s) {
        logger_1.default.debug("Pact Broker Mock listening on port: " + PORT);
        server = s;
    }); });
    after(function () { return server.close(); });
    describe("Publisher", function () {
        context("when not given pactFilesOrDirs", function () {
            it("should fail with an error", function () {
                expect(function () {
                    publisher_1.default({
                        pactBroker: "http://localhost",
                        consumerVersion: "1.0.0"
                    });
                }).to.throw(Error);
            });
        });
        context("when not given pactBroker", function () {
            it("should fail with an error", function () {
                expect(function () {
                    publisher_1.default({
                        pactFilesOrDirs: [path.dirname(currentDir)],
                        consumerVersion: "1.0.0"
                    });
                }).to.throw(Error);
            });
        });
        context("when not given consumerVersion", function () {
            it("should fail with an error", function () {
                expect(function () {
                    publisher_1.default({
                        pactBroker: "http://localhost",
                        pactFilesOrDirs: [path.dirname(currentDir)]
                    });
                }).to.throw(Error);
            });
        });
        context("when given local Pact URLs that don't exist ", function () {
            it("should fail with an error", function () {
                expect(function () {
                    publisher_1.default({
                        pactBroker: "http://localhost",
                        pactFilesOrDirs: ["./test.json"]
                    });
                }).to.throw(Error);
            });
        });
        context("when given local Pact URLs that do exist", function () {
            it("should not fail", function () {
                expect(function () {
                    publisher_1.default({
                        pactBroker: "http://localhost",
                        pactFilesOrDirs: [path.dirname(currentDir)],
                        consumerVersion: "1.0.0"
                    });
                }).to.not.throw(Error);
            });
        });
        context("when given the correct arguments", function () {
            it("should return a Publisher object", function () {
                var p = publisher_1.default({
                    pactBroker: "http://localhost",
                    pactFilesOrDirs: ["http://idontexist"],
                    consumerVersion: "1.0.0"
                });
                expect(p).to.be.ok;
                expect(p.publish).to.be.a("function");
            });
        });
    });
});
//# sourceMappingURL=publisher.spec.js.map